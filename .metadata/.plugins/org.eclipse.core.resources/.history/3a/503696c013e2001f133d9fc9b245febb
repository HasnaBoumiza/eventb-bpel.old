package za.vutshilalabs.bpelgen.core.translation;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.xml.XMLConstants;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.eclipse.core.resources.IFile;
import org.eventb.core.IAction;
import org.eventb.core.IEvent;
import org.eventb.core.IGuard;
import org.eventb.core.IInvariant;
import org.eventb.core.IMachineRoot;
import org.eventb.core.IVariable;
import org.eventb.core.IMachineRoot;
import org.rodinp.core.RodinDBException;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import za.vutshilalabs.bpelgen.core.IGlobalConstants;
import za.vutshilalabs.bpelgen.core.XMLtool;

/**
 * Creates a Bpel document from Event-B machine
 * 
 * @author Lovewell Ramuthivheli <lovewell@tuks.co.za>
 * 
 */
public class MachineTranslator {

	private static final String XSD_NS = XMLConstants.W3C_XML_SCHEMA_NS_URI;
	private static final String STUB = "stub";
	private Element process;
	private IMachineRoot machine;
	private Document document;

	public void createFile(IFile file) {
		TransformerFactory factory;
		Source source;
		Transformer transformer;
		Result result;
		try {
			factory = TransformerFactory.newInstance();
			transformer = factory.newTransformer();
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			source = new DOMSource(document);
			result = new StreamResult(file.getLocation().toFile());
			// result = new StreamResult(System.out);
			transformer.transform(source, result);
			file.refreshLocal(0, null);

		} catch (Exception ex) {
			System.err.printf("failed creating file, exception: %s",
					ex.getMessage());
		}

	}

	private void createProcess(String processName) {
		process = document.createElement("process");
		process.setAttribute("name", processName);
		process.setAttribute("targetNamespace", IGlobalConstants.targetNS);
		process.setAttribute("xmlns", IGlobalConstants.NS);
		process.setAttribute("xmlns:xs", XSD_NS);
		document.appendChild(process);
	}

	public void init(IMachineRoot machine) {

		XMLtool xml = new XMLtool(true, null);
		this.machine = machine;
		document = xml.getDocument();
		createElements(machine.getElementName());

	}

	private boolean createElements(final String servName) {
		try {

			Comment generated = document
					.createComment(IGlobalConstants.GENERATED);
			document.appendChild(generated);
			createProcess(servName);
			//createVariables();
			System.out.println("FINDING SEQUENCES");
			findSequences();
			System.out.println("DONE FINDING SEQUENCES");

			return true;
		} catch (Exception e) {
			System.err.printf("failed getting Events, exception: %s\n",
					e.getMessage());
			e.printStackTrace();
			return false;
		}

	}

	private void createVariables() throws RodinDBException {
		Element variables = document.createElement("variables");
		IInvariant[] invariants;
		Element variable;

		invariants = machine.getInvariants();
		for (IInvariant invariant : invariants) {

			String predicate = invariant.getPredicateString();
			int position = predicate.indexOf(IGlobalConstants.MATH_ELEMENT);
			String second = predicate.substring(position + 1).trim();
			String first = predicate.substring(0, position - 1).trim();

			variable = document.createElement("variable");
			variable.setAttribute("name", first);
			if (second.endsWith(IGlobalConstants.MESSAGE)) {
				variable.setAttribute("messageType", second);
			} else {
				String type = getType(second);
				variable.setAttribute("type", type);
			}
			variables.appendChild(variable);
		}
		process.appendChild(variables);

	}

	private String getType(String type) {
		for (int i = 0; i < IGlobalConstants.EVENTB_TYPES.length; i++) {
			if (IGlobalConstants.EVENTB_TYPES[i].equals(type)) {
				return IGlobalConstants.XSD_TYPES[i];
			}
		}

		return "xs:anyType";
	}

	private void createActivity(Element parent, IEvent event)
			throws DOMException, RodinDBException {
		if (event.getLabel().startsWith("rec_")) {
			Element recieve = document.createElement("receive");
			recieve.setAttribute("name", event.getLabel());
			recieve.setAttribute("partnerLink", STUB);
			recieve.setAttribute("operation", STUB);
			parent.appendChild(recieve);
		} else if (event.getLabel().startsWith("rep_")) {
			Element reply = document.createElement("reply");
			reply.setAttribute("name", event.getLabel());
			reply.setAttribute("partnerLink", STUB);
			reply.setAttribute("operation", STUB);
			parent.appendChild(reply);
		} else if (event.getLabel().startsWith("inv_")) {
			Element invoke = document.createElement("invoke");
			invoke.setAttribute("name", event.getLabel());
			invoke.setAttribute("partnerLink", STUB);
			invoke.setAttribute("operation", STUB);
			parent.appendChild(invoke);

		}
	}

	private void findSequences() throws RodinDBException {
		IVariable variables[] = machine.getVariables();
		ArrayList<IVariable> variants = new ArrayList<IVariable>(0);
		for(IVariable v: variables){
			if(v.getElementName().endsWith("_Variant"));
			variants.add(v);
		}
		System.out.println("the number of variants in this machine is: " + variants.size());

	}

	
}
